#!/bin/sh

# What we output to the current directory
output_base='peach-backup'
output_json="$output_base-data.json"
img_base_dir="$output_base-images"

# The HTML template (in this directory)
pug_template="$(dirname "$0")/peach-backup-page.pug"

if test -e "$output_json"; then
    echo "Moving old $output_json to $output_json.old"
    mv "$output_json" "$output_json.old"
fi

# Fetch something to log in if necessary
if ! peach /activity/isUnread -o /dev/null; then
    echo "Can't connect to Peach"
    exit 1
fi

# Save the current value of pagination so we can turn it back off if desired.
orig_pagination="$(peach /stream/allow-pagination | jq '.data.allowPagination')"

if test "$orig_pagination" = 'false'; then
    echo "Turning on pagination..."
    peach /stream/allow-pagination -d '{"allowPagination": true}' | jq -c
    sleep 8
fi

page_temp="$(mktemp -t peach-page.XXXXXX)"
full_temp="$(mktemp -t peach-full.XXXXXX)"
months_temp="$(mktemp -t peach-months.XXXXXX)"
pug_temp="$(mktemp -t peach-pug.XXXXXX)"
cleanup() { rm -f -- "$page_temp" "$full_temp" "$months_temp" "$pug_temp"; }
trap 'exit $?' HUP INT QUIT TERM; trap cleanup exit

write_pug() {
    output="$1"; shift
    cat > "$pug_temp"
    pug --obj "$pug_temp" --pretty --path "$pug_template" <"$pug_template" >"$output"
    echo "  - wrote $output"
}

my_id="$(jq -r '.data.streams[0].id' "$HOME/.peach-session")"
until test "$cursor" = '0' -o "$cursor" = 'null'; do
    echo "Fetching page from stream $my_id${cursor:+ with cursor $cursor}..."
    peach "/stream/id/$my_id${cursor:+?cursor=$cursor}" > "$page_temp"
    sleep 4
    if test "$(jq -r '.success' "$page_temp")" = '0'; then
        echo "Failed! Bailing."
        break
    fi
    cursor="$(jq -r .data.cursor < "$page_temp")"

    jq --argjson types '{"image": ["src"], "gif": ["src"], "video": ["src", "posterSrc"]}' \
        -r '.data.posts[] | .id as $id | .message[] | . as $m | $types[.type] // empty | .[] | "\($id) \($m[.])"' "$page_temp" \
    | while read post_id img_url; do
        img_dir="$img_base_dir/$post_id"
        mkdir -p "$img_dir"
        img_file="$img_dir/$(basename "$img_url")"
        if ! test -e "$img_file"; then
            echo "Downloading image $img_file..."
            curl -s -o "$img_file" "$img_url"
            sleep 2
        fi
    done

    if test -s "$output_json"; then
        cp "$output_json" "$full_temp"
        jq --slurpfile newPage "$page_temp" '.posts = ($newPage[0].data.posts + .posts)' "$full_temp" > "$output_json"
    else
        jq --arg imgBase "$img_base_dir" '.data | .imgBase = $imgBase' "$page_temp" > "$output_json"
    fi

    page_date="$(jq -r '.posts[0].createdTime | gmtime | strftime("%F %T %Z")' "$output_json")"
    echo "Loaded entries back to $page_date; writing HTML..."

    jq '.posts | map(.createdTime | gmtime | strftime("%Y-%m")) | unique' "$output_json" > "$months_temp"
    jq -r '.[]' "$months_temp" | while read -r month; do
        jq --arg month "$month" '.posts |= map(select(.createdTime | gmtime | strftime("%Y-%m") == $month))' "$output_json" |
            write_pug "$output_base-$month.html"
    done
    jq --slurpfile months "$months_temp" --arg htmlBase "$output_base" 'del(.posts) | .months = $months[0] | .htmlBase = $htmlBase' "$output_json" |
        write_pug "$output_base-index.html"
done

if test "$orig_pagination" = 'false'; then
    echo "Turning pagination back off..."
    peach /stream/allow-pagination -d '{"allowPagination": false}' | jq -c
fi

echo "Finished creating backup!"
